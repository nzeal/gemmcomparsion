#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>
#include <cublas_v2.h>
#include "performance.h"
#include <iostream>

// Error checking macro
#define CHECK_CUDA(call) \
do { \
    cudaError_t err = call; \
    if (err != cudaSuccess) { \
        printf("CUDA error at %s %d: %s\n", __FILE__, __LINE__, \
               cudaGetErrorString(err)); \
        exit(EXIT_FAILURE); \
    } \
} while(0)

#define CHECK_CUBLAS(call) \
do { \
    cublasStatus_t status = call; \
    if (status != CUBLAS_STATUS_SUCCESS) { \
        printf("cuBLAS error at %s %d\n", __FILE__, __LINE__); \
        exit(EXIT_FAILURE); \
    } \
} while(0)

int main() {
    // Matrix dimensions
    const int m = 1024;  // rows of A and C
    const int k = 512;   // cols of A and rows of B
    const int n = 256;   // cols of B and C
    
    // Calculate sizes and number of operations
    size_t size_A = m * k * sizeof(double);
    size_t size_B = k * n * sizeof(double);
    size_t size_C = m * n * sizeof(double);
    size_t total_data_size = size_A + size_B + size_C;
    
    // For matrix multiplication, number of FLOPs is 2*m*n*k
    // (one multiplication and one addition for each element)
    size_t num_operations = 2ULL * m * n * k;
    
    // Host matrices
    double *h_A = (double*)malloc(size_A);
    double *h_B = (double*)malloc(size_B);
    double *h_C = (double*)malloc(size_C);
    
    // Initialize matrices (example with simple values)
    for(int i = 0; i < m * k; i++) h_A[i] = 1.0;
    for(int i = 0; i < k * n; i++) h_B[i] = 2.0;
    for(int i = 0; i < m * n; i++) h_C[i] = 0.0;
    
    // Device matrices
    double *d_A, *d_B, *d_C;
    CHECK_CUDA(cudaMalloc(&d_A, size_A));
    CHECK_CUDA(cudaMalloc(&d_B, size_B));
    CHECK_CUDA(cudaMalloc(&d_C, size_C));
    
    // Create cuBLAS handle
    cublasHandle_t handle;
    CHECK_CUBLAS(cublasCreate(&handle));
    
    // Start timing memory transfers
    auto transfer_start = getCurrentTime();
    
    // Copy data to device
    CHECK_CUDA(cudaMemcpy(d_A, h_A, size_A, cudaMemcpyHostToDevice));
    CHECK_CUDA(cudaMemcpy(d_B, h_B, size_B, cudaMemcpyHostToDevice));
    
    auto transfer_end = getCurrentTime();
    std::cout << "Memory Transfer (Host to Device):\n";
    computeAndPrintMetrics(transfer_start, transfer_end, size_A + size_B, 0);
    
    // Perform matrix multiplication: C = alpha*A*B + beta*C
    double alpha = 1.0;
    double beta = 0.0;
    
    // Synchronize before computation
    cudaDeviceSynchronize();
    auto compute_start = getCurrentTime();
    
    CHECK_CUBLAS(cublasDgemm(
        handle,
        CUBLAS_OP_N,    // no transpose for A
        CUBLAS_OP_N,    // no transpose for B
        m,              // rows of A and C
        n,              // cols of B and C
        k,              // cols of A and rows of B
        &alpha,         // alpha scaling factor
        d_A,            // device matrix A
        m,              // leading dimension of A
        d_B,            // device matrix B
        k,              // leading dimension of B
        &beta,          // beta scaling factor
        d_C,            // device matrix C
        m               // leading dimension of C
    ));
    
    // Synchronize after computation
    cudaDeviceSynchronize();
    auto compute_end = getCurrentTime();
    
    std::cout << "DGEMM Computation:\n";
    computeAndPrintMetrics(compute_start, compute_end, 0, num_operations);
    
    // Start timing transfer back
    auto transfer_back_start = getCurrentTime();
    
    // Copy result back to host
    CHECK_CUDA(cudaMemcpy(h_C, d_C, size_C, cudaMemcpyDeviceToHost));
    
    auto transfer_back_end = getCurrentTime();
    std::cout << "Memory Transfer (Device to Host):\n";
    computeAndPrintMetrics(transfer_back_start, transfer_back_end, size_C, 0);
    
    // Print first few elements of result (for verification)
    printf("First few elements of C:\n");
    for(int i = 0; i < 5; i++) {
        printf("C[%d] = %f\n", i, h_C[i]);
    }
    
    // Cleanup
    CHECK_CUBLAS(cublasDestroy(handle));
    CHECK_CUDA(cudaFree(d_A));
    CHECK_CUDA(cudaFree(d_B));
    CHECK_CUDA(cudaFree(d_C));
    free(h_A);
    free(h_B);
    free(h_C);
    
    return 0;
}
